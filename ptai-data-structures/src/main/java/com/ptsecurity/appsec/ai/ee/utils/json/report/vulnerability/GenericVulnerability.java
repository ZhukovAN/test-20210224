package com.ptsecurity.appsec.ai.ee.utils.json.report.vulnerability;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.ptsecurity.appsec.ai.ee.utils.json.metadata.Metadata;
import com.ptsecurity.appsec.ai.ee.utils.json.metadata.description.Description;
import com.ptsecurity.appsec.ai.ee.utils.json.metadata.issue.GenericIssueMetadata;
import com.ptsecurity.appsec.ai.ee.utils.json.report.vulnerability.details.BestPlaceToFix;
import com.ptsecurity.appsec.ai.ee.utils.json.report.vulnerability.details.Place;
import com.ptsecurity.appsec.ai.ee.utils.json.report.vulnerability.details.Ticket;
import lombok.Getter;

import java.util.List;


@JsonTypeInfo(
        use = JsonTypeInfo.Id.NAME,
        include = JsonTypeInfo.As.PROPERTY,
        property = "Class")
@JsonSubTypes({
        @JsonSubTypes.Type(value = AbstractInterpretationVulnerability.class, name = "Vulnerability"),
        @JsonSubTypes.Type(value = PatternMatchingVulnerability.class, name = "Weakness"),
        @JsonSubTypes.Type(value = FingerprintVulnerability.class, name = "Fingerprint"),
        @JsonSubTypes.Type(value = ConfigurationVulnerability.class, name = "Configuration")
})
@Getter
public abstract class GenericVulnerability {
    @JsonProperty("Id")
    protected String id;
    @JsonProperty("Type")
    protected String type;
    @JsonProperty("RvpPvo")
    protected String rvpPvo;
    @JsonProperty("Counter")
    protected Integer counter;
    @JsonProperty("GroupId")
    protected String groupId;
    @JsonProperty("InternalId")
    protected String internalId;
    @JsonProperty("IsFavorite")
    protected Boolean favorite;
    @JsonProperty("IsSuspected")
    protected Boolean suspected;
    @JsonProperty("IsSuppressed")
    protected Boolean suppressed;
    @JsonProperty("ScanResultId")
    protected String scanResultId;
    @JsonProperty("ApprovalState")
    protected Integer approvalState;
    @JsonProperty("VulnerableCode")
    protected String vulnerableCode;
    @JsonProperty("RelativeFilePath")
    protected String relativeFilePath;
    @JsonProperty("NewInScanResultId")
    protected Boolean newInScanResultId;
    @JsonProperty("OldInScanResultId")
    protected Boolean oldInScanResultId;

    @JsonProperty("BestPlaceToFix")
    protected BestPlaceToFix bestPlaceToFix;
    @JsonProperty("VulnerableExpression")
    protected Place vulnerableExpression;
    @JsonProperty("LinkedTickets")
    protected List<Ticket> linkedTickets;

    Description[] description = null;
    public Description[] getDescription() {
        if (null == description) {
            description = new Description[1];
            description[0] = Metadata.DESCRIPTIONS.getOrDefault(this.type, Description.DEFAULT);
        }
        return description;
    }

    GenericIssueMetadata meta = null;
    public GenericIssueMetadata getMeta() {
        if (null == meta)
            meta = Metadata.ISSUES.get(type);
        return meta;
    }
}

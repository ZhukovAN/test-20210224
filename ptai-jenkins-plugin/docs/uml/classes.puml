@startuml
' skinparam linetype polyline
' skinparam linetype ortho'

package auth {
    abstract class Auth {
      {Static} -all
    }
    abstract class AuthDescriptor
    class CredentialsAuthDescriptor {
      +doFillCredentialsIdItems()
      +doTestJenkinsServer()
    }
    class NoneAuthDescriptor {
      +doTestJenkinsServer()
    }
    class TokenAuthDescriptor {
      +doTestJenkinsServer()
    }
    AuthDescriptor <|-up- CredentialsAuthDescriptor
    AuthDescriptor <|-up- NoneAuthDescriptor
    AuthDescriptor <|-up- TokenAuthDescriptor
    
    class CredentialsAuth {
      -String credentialsId
      +getUserName()
      +getPassword()
      {Static} +UsernamePasswordCredentials getCredentialsById()
    }
    class NoneAuth
    class TokenAuth {
      -userName
      -apiToken
    }
    Auth <|-- CredentialsAuth
    Auth <|-- NoneAuth
    Auth <|-- TokenAuth
    
    CredentialsAuth --> "descriptor" CredentialsAuthDescriptor
    NoneAuth --> "descriptor" NoneAuthDescriptor
    TokenAuth --> "descriptor" TokenAuthDescriptor
}
' class Descriptor
abstract class ConfigBase
abstract class ConfigBaseDescriptor<ConfigBase>
' Descriptor <|-- ConfigBaseDescriptor
class ConfigCustom {

}
class ConfigGlobal {
  +Stting configName
}
ConfigBase <|-- ConfigCustom
ConfigBase <|-- ConfigGlobal
class ConfigCustomDescriptor
class ConfigGlobalDescriptor {
  +doFillConfigNameItems()
}
ConfigBaseDescriptor <|-- ConfigCustomDescriptor
ConfigBaseDescriptor <|-- ConfigGlobalDescriptor

ConfigBase --> "descriptor" ConfigBaseDescriptor
ConfigGlobal --> "descriptor" ConfigGlobalDescriptor
ConfigCustom --> "descriptor" ConfigCustomDescriptor
class ServerSettings {
  +String serverUrl
  +String legacyServerCredentialsId
  +String jenkinsServerUrl
  +String jenkinsJobName
  +Integer jenkinsMaxRetry
  +Integer jenkinsRetryDelay
}
ConfigCustom --> "legacyServerSettings" ServerSettings
ServerSettings --> "jenkinsLegacyServerCredentials" Auth

class ServerSettingsDescriptor {
  +doFillLegacyServerCredentialsIdItems()
  +doCheckServerUrl()
  +doCheckJenkinsServerUrl()
  +doCheckJenkinsJobName()
  +doTestServer()
  +doCheckJenkinsMaxRetry()
  +doCheckJenkinsRetryDelay()
}
ServerSettings --> "descriptor" ServerSettingsDescriptor
class ServerSettingsDefaults
ServerSettings --> "serverSettingsDefaults" ServerSettingsDefaults

package globalconfig {
    class ConfigBase {
    }

    class GlobalConfig {
      +String configName

    }
    class GlobalConfigDescriptor {
      +doCheckConfigName()
    }
    GlobalConfig --> "legacyServerSettings" ServerSettings
    GlobalConfig --> "descriptor" GlobalConfigDescriptor
}

abstract class ScanSettings {

}
note top of ScanSettings
SAST settings may be defined
manually (settings and policy json's)
or using UI
end note

class ScanSettingsManual {
  +String jsonSettings
  +String jsonPolicy
}

class ScanSettingsUi {
  +String projectName
}

class ScanSettingsUiDescriptor {
  +doCheckProjectName()
  +doTestProject()
}

class ScanSettingsManualDescriptor {
  +doCheckJsonSettings()
  +doCheckJsonPolicy()
  +doTestJsonSettings()
  +doTestJsonPolicy()
}

ScanSettingsUi --> "descriptor" ScanSettingsUiDescriptor
ScanSettingsManual --> "descriptor" ScanSettingsManualDescriptor

ScanSettings <|-- ScanSettingsManual
ScanSettings <|-- ScanSettingsUi


class Transfer {
  +String includes
  +String excludes
  +String removePrefix
  +boolean flatten
  +boolean useDefaultExcludes
  +String patternSeparator
}

class Plugin {
  +String consolePrefix
  +boolean failIfFailed
  +boolean failIfUnstable
  +String nodeName
  +boolean verbose
  +perform()
}
class PluginDescriptor {
  +GlobalConfig getConfig(String configName)
}

class TransferDescriptor {

}

PluginDescriptor ---> "globalConfigs[]" GlobalConfig
note as GlobalConfigNote
Globally-defined
named PTAI server config
end note
GlobalConfig .. GlobalConfigNote
PluginDescriptor --> "transferDescriptor" TransferDescriptor

Plugin --> "config" ConfigBase
note top of ConfigBase
SAST job PTAI server config
may be defined globally
(than it is identified with configName)
or on a per-job basis
end note

Plugin --> "scanSettings" ScanSettings
Plugin -up-> "transfers[]" Transfer
Plugin --> "descriptor" PluginDescriptor

class TransferDescriptor {
  +doCheckIncludes()
  +doCheckPatternSeparator()
}

class TransferDefaults {
  +String includes
  +String excludes
  +String removePrefix
  +boolean flatten
  +boolean useDefaultExcludes
  +String patternSeparator
}

Transfer -right-> "descriptor" TransferDescriptor
TransferDescriptor --> "transferDefaults" TransferDefaults

package credentials {
    interface LegacyServerCredentials {
      +String getClientCertificate()
      +Secret getClientKey()
      +String getServerCaCertificates()
    }
    
    class LegacyServerCredentialsImpl {
      +String clientCertificate
      +Secret clientKey
      +String serverCaCertificates
      {Static} +LegacyServerCredentials getCredentialsById()
    }

    LegacyServerCredentials <|-- LegacyServerCredentialsImpl

    interface SlimServerCredentials {
      +String getClientCertificate()
      +Secret getClientKey()
      +String getServerCaCertificates()
    }
    
    class SlimServerCredentialsImpl {
      +String clientCertificate
      +Secret clientKey
      +String serverCaCertificates
      {Static} +SlimServerCredentials getCredentialsById()
    }
    SlimServerCredentials <|-- SlimServerCredentialsImpl
}
class Validator {
  {Static} +boolean doCheckFieldNotEmpty(String value)
  {Static} +boolean doCheckFieldUrl(String value)
  {Static} +boolean doCheckFieldInteger(Integer value)
  {Static} +boolean doCheckFieldBetween(Integer value, int from, int to)
  {Static} +boolean doCheckFieldRegEx(String value)
  {Static} +boolean doCheckFieldJsonSettings(String value)
  {Static} +boolean doCheckFieldJsonPolicy(String value)
  {Static} +FormValidation doCheckFieldNotEmpty(String value, String errorMessage)
  {Static} +FormValidation doCheckFieldInteger(Integer value, String errorMessage)
  {Static} +FormValidation doCheckFieldBetween(Integer value, int from, int to, String errorMessage)
  {Static} +FormValidation doCheckFieldUrl(String value, String errorMessage)
  {Static} +FormValidation doCheckFieldRegEx(String value, String errorMessage)
  {Static} +FormValidation doCheckFieldJsonPolicy(String value, String errorMessage)
  {Static} +FormValidation doCheckFieldJsonSettings(String value, String errorMessage)
  {Static} +FormValidation error(Exception e)
}
class BuildEnv {
  +envVars
  +baseDirectory
  +buildTime
}
class BuildInfo {
  +setEffectiveEnvironmentInBuildInfo()
}
BuildEnv <|-- BuildInfo
class SastJob
class RemoteSastJob {
  +Launcher launcher
  void saveReport(String folder, String artifact, String data)
}
class MasterToSlaveCallable
class ReportSaver<Void, IOException> {
  +String folder
  +String artifact
  +String data
  +Void save(Launcher launcher)
  +Void call()
}
MasterToSlaveCallable <|-- ReportSaver
class Executor {

}
class Base
Base <|-- Executor
class RemoteFileCollector<FilePath, PtaiClientException> {
  Executor executor
}
MasterToSlaveCallable <|-- RemoteFileCollector
SastJob <|-- RemoteSastJob
@enduml
